generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(cuid())

  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts               Account[]
  sessions               Session[]
  UserSelectedRepository UserSelectedRepository[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserSelectedRepository {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  githubRepoId BigInt

  name            String
  fullName        String
  description     String?  @db.Text
  htmlUrl         String
  private         Boolean
  language        String?
  stargazersCount Int
  forksCount      Int
  updatedAtGitHub DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedback Feedback[]

  @@unique([userId, githubRepoId])
  @@map("user_selected_repositories")
}

enum FeedbackType {
  BUG
  FEATURE_REQUEST
  OTHER
}

enum FeedbackStatus {
  PENDING
  SUBMITTED
  REJECTED
}

model Feedback {
  id        String @id @default(cuid())
  userName  String
  userEmail String

  repositoryId String
  repository   UserSelectedRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  title       String
  content     String         @db.Text
  type        FeedbackType
  status      FeedbackStatus
  gitHubIssue String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images FeedbackImage[]

  feedbackAIResultId String?           @unique
  aiResults          FeedbackAIResult? @relation(fields: [feedbackAIResultId], references: [id], onDelete: Cascade)
}

model FeedbackImage {
  id String @id @default(cuid())

  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackId String

  url       String
  createdAt DateTime @default(now())
}

model FeedbackAIResult {
  id String @id @default(cuid())

  aiTitle          String?
  aiSummary        String? @db.Text
  stepsToReproduce String? @db.Text
  expectedBehavior String? @db.Text

  modelUsed   String
  temperature Float
  rawResponse String? @db.Text

  createdAt DateTime @default(now())

  feedback Feedback?
}
