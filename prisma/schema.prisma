// schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Defines the Prisma Client generator.
// When you run `npx prisma generate`, this creates the client code
// that allows your application to interact with your database.
generator client {
  provider = "prisma-client-js"
  // If you store your generated client in a custom path (e.g., app/generated/prisma),
  // you might need output = "./node_modules/@prisma/client" or a custom path
  // However, the default is usually fine if you import 'prisma' from a lib file.
}

// Defines your database connection.
// The `url` usually comes from an environment variable (e.g., .env file).
datasource db {
  provider  = "postgresql" // Change this to "mysql", "sqlite", "sqlserver" etc., if needed
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js models (User, Account, Session, VerificationToken)
// These models are required when using the @next-auth/prisma-adapter.
// They are specifically named and structured by NextAuth.js.

model User {
  // Primary key, generated automatically (cuid or uuid is standard)
  id String @id @default(cuid())

  // Fields for credentials login (email, hashedPassword) and general user info
  name           String? // User's name
  email          String?   @unique // User's email, must be unique
  emailVerified  DateTime? // Timestamp when email was verified
  hashedPassword String? // Hashed password for credentials login (nullable if user only uses OAuth)
  image          String? // URL to user's profile image

  // Timestamps for creation and last update
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships with other NextAuth.js models
  accounts               Account[] // A user can have multiple linked accounts (OAuth, credentials)
  sessions               Session[] // A user can have multiple active sessions
  UserSelectedRepository UserSelectedRepository[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") // Foreign key to User model
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id") // ID from the OAuth provider
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensures that a user cannot link the same provider account twice
  @@unique([provider, providerAccountId])
  // Map table name if you prefer snake_case in your database
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token") // Unique token for the session
  userId       String   @map("user_id") // Foreign key to User model
  expires      DateTime // Expiration timestamp for the session

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Map table name if you prefer snake_case in your database
  @@map("sessions")
}

// This model is for email verification tokens (e.g., for magic link login)
// If you are only using OAuth and Credentials, you might not actively use this
// but it's part of the standard Prisma Adapter schema.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Composite unique constraint for identifier and token
  @@unique([identifier, token])
  // Map table name if you prefer snake_case in your database
  @@map("verificationtokens")
}

model UserSelectedRepository {
  // Primary key for this table in your database
  id String @id @default(cuid())

  // Foreign key to link to the User who selected this repository
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // GitHub's unique ID for the repository (crucial for linking back to GitHub)
  githubRepoId BigInt // GitHub IDs can be large, so BigInt is suitable

  // Core repository information from GitHub
  name            String // Repository name (e.g., "my-awesome-project")
  fullName        String // Repository full name (e.g., "username/my-awesome-project")
  description     String?  @db.Text // Can be long, use @db.Text for text type in Postgres
  htmlUrl         String // URL to the repository on GitHub
  private         Boolean // Whether the repository is private or public
  language        String? // Primary language (e.g., "TypeScript", "JavaScript")
  stargazersCount Int // Number of stars
  forksCount      Int // Number of forks
  updatedAtGitHub DateTime // Last updated timestamp from GitHub

  // Timestamps for when this record was created/updated in your database
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensures that a user can only select a specific GitHub repository once
  @@unique([userId, githubRepoId])
  // Optional: Map table name if you prefer snake_case in your database
  @@map("user_selected_repositories")
}
